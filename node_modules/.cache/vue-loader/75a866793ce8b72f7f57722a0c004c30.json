{"remainingRequest":"/home/runner/work/U1_Practica_Pedagogica_II/U1_Practica_Pedagogica_II/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U1_Practica_Pedagogica_II/U1_Practica_Pedagogica_II/src/views/curso/Tema1.vue?vue&type=template&id=30cc8eda&lang=pug&","dependencies":[{"path":"/home/runner/work/U1_Practica_Pedagogica_II/U1_Practica_Pedagogica_II/src/views/curso/Tema1.vue","mtime":1745932539046},{"path":"/home/runner/work/U1_Practica_Pedagogica_II/U1_Practica_Pedagogica_II/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Practica_Pedagogica_II/U1_Practica_Pedagogica_II/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U1_Practica_Pedagogica_II/U1_Practica_Pedagogica_II/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U1_Practica_Pedagogica_II/U1_Practica_Pedagogica_II/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Practica_Pedagogica_II/U1_Practica_Pedagogica_II/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}